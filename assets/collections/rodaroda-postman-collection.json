{
	"info": {
		"_postman_id": "e10c5486-6ada-4360-95be-0d80d0d46c49",
		"name": "Rodaroda",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14986445"
	},
	"item": [
		{
			"name": "Success",
			"item": [
				{
					"name": "Localities",
					"item": [
						{
							"name": "Consult localities",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Test: Status code equals to 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Test: Status equals to OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Test: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Test: Should exist a body and be valid\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Test: Name under 4096 characters\", function() {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.name).to.have.lengthOf.below(4096);",
											"    });",
											"});",
											"",
											"pm.test(\"Test: Type under 4096 characters\", function() {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.type).to.have.lengthOf.below(4096);",
											"    });",
											"});",
											"",
											"pm.test(\"Test: Response JSON format\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Test: Header Content-Type equals not null\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Test: Performance (maximum response time)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Test: Validate not null field name for each object\", function () {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.name).to.not.include(null);",
											"    });",
											"});",
											"",
											"pm.test(\"Test: Validate not null field type for each object\", function () {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.name).to.not.include(null);",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/localities",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"localities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Consult locality by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Test: Status code equals to 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Test: Status equals to OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Test: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Test: Should exist a body and be valid\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Test: Name under 4096 characters\", function() {",
											"        pm.expect(responseJson.name).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Test: Type under 4096 characters\", function() {",
											"        pm.expect(responseJson.type).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Test: Response JSON format\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Test: Header Content-Type equals not null\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Test: Performance (maximum response time)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Test: Validate not null field name\", function () {",
											"        pm.expect(responseJson.name).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Test: Validate not null field type\", function () {",
											"        pm.expect(responseJson.type).to.not.include(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/localities/1",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"localities",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Inserting locality with type: origin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Test: Status code equals to 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Test: Status equals to OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Test: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Test: Should exist a body and be valid\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Test: Name under 4096 characters\", function() {",
											"        pm.expect(responseJson.name).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Test: Type under 4096 characters\", function() {",
											"        pm.expect(responseJson.type).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Test: Response JSON format\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Test: Header Content-Type equals not null\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Test: Performance (maximum response time)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Test: Validate not null field name\", function () {",
											"        pm.expect(responseJson.name).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Test: Validate not null field type\", function () {",
											"        pm.expect(responseJson.type).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Test: Registered locality type\", function() {",
											"    pm.expect(responseJson.type).to.eql(\"origin\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n{\n  \"name\": \"Locality name {{RANDOM_NAME}}\",\n  \"type\": \"origin\"\n},\n{\n  \"name\": \"Locality name {{RANDOM_NAME}}\",\n  \"type\": \"origin\"\n}\n]\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/localities",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"localities"
									]
								}
							},
							"response": []
						},
						{
							"name": "inserting locality with type: destination",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Test: Status code equals to 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Test: Status equals to OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Test: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Test: Should exist a body and be valid\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Test: Name under 4096 characters\", function() {",
											"        pm.expect(responseJson.name).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Test: Type under 4096 characters\", function() {",
											"        pm.expect(responseJson.type).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Test: Response JSON format\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Test: Header Content-Type equals not null\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Test: Performance (maximum response time)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Test: Validate not null field name\", function () {",
											"        pm.expect(responseJson.name).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Test: Validate not null field type\", function () {",
											"        pm.expect(responseJson.type).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Test: Registered locality type\", function() {",
											"    pm.expect(responseJson.type).to.eql(\"destination\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n{\n  \"name\": \"Locality name {{RANDOM_NAME}}\",\n  \"type\": \"origin\"\n},\n{\n  \"name\": \"Locality name {{RANDOM_NAME}}\",\n  \"type\": \"origin\"\n}\n]\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/localities",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"localities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Updating locality by id with type destination to origin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const postProduct = {",
											"  url: pm.variables.get('APP_DOMAIN_AND_PORT') + '/localities',",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json; charset=utf-8',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({",
											"    'name': 'Locality name ' + pm.environment.get('RANDOM_NAME'),",
											"    'type': 'destination'",
											"    })",
											"  }",
											"};",
											"",
											"pm.sendRequest(postProduct, function (err, response) {",
											"  if (err){",
											"      console.log(err);",
											"      return false;",
											"  }",
											"  const responseJson = response.json();",
											"  let ID = responseJson.id;",
											"  pm.environment.set('LOCALITY_ID', ID);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Test: Status code equals to 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Test: Status equals to OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Test: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Test: Should exist a body and be valid\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Test: Name under 4096 characters\", function() {",
											"        pm.expect(responseJson.name).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Test: Type under 4096 characters\", function() {",
											"        pm.expect(responseJson.type).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Test: Response JSON format\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Test: Header Content-Type equals not null\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Test: Performance (maximum response time)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Test: Validate not null field name\", function () {",
											"        pm.expect(responseJson.name).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Test: Validate not null field type\", function () {",
											"        pm.expect(responseJson.type).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Test: Registered locality type\", function() {",
											"    pm.expect(responseJson.type).to.eql(\"origin\");",
											"});",
											"",
											"pm.test(\"Test: Updated locality name\", function() {",
											"    pm.expect(responseJson.name).to.eql(\"Locality \" + pm.environment.get('RANDOM_NAME') + \" updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Locality {{RANDOM_NAME}} updated\",\n  \"type\": \"origin\"\n}\n\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/localities/{{LOCALITY_ID}}",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"localities",
										"{{LOCALITY_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Updating locality by id with type origin to destination",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const postProduct = {",
											"  url: pm.variables.get('APP_DOMAIN_AND_PORT') + '/localities',",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json; charset=utf-8',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({",
											"    'name': 'Locality name ' + pm.environment.get('RANDOM_NAME'),",
											"    'type': 'origin'",
											"    })",
											"  }",
											"};",
											"",
											"pm.sendRequest(postProduct, function (err, response) {",
											"  if (err){",
											"      console.log(err);",
											"      return false;",
											"  }",
											"  const responseJson = response.json();",
											"  let ID = responseJson.id;",
											"  pm.environment.set('LOCALITY_ID', ID);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Test: Status code equals to 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Test: Status equals to OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Test: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Test: Should exist a body and be valid\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Test: Name under 4096 characters\", function() {",
											"        pm.expect(responseJson.name).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Test: Type under 4096 characters\", function() {",
											"        pm.expect(responseJson.type).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Test: Response JSON format\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Test: Header Content-Type equals not null\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Test: Performance (maximum response time)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Test: Validate not null field name\", function () {",
											"        pm.expect(responseJson.name).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Test: Validate not null field type\", function () {",
											"        pm.expect(responseJson.type).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Test: Registered locality type\", function() {",
											"    pm.expect(responseJson.type).to.eql(\"destination\");",
											"});",
											"",
											"pm.test(\"Test: Updated locality name\", function() {",
											"    pm.expect(responseJson.name).to.eql(\"Locality \" + pm.environment.get('RANDOM_NAME') + \" updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Locality {{RANDOM_NAME}} updated\",\n  \"type\": \"destination\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/localities/{{LOCALITY_ID}}",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"localities",
										"{{LOCALITY_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deleting locality by id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const postProduct = {",
											"  url: pm.variables.get('APP_DOMAIN_AND_PORT') + '/localities',",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json; charset=utf-8',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({",
											"    'name': 'Locality name ' + pm.environment.get('RANDOM_NAME'),",
											"    'type': 'destination'",
											"    })",
											"  }",
											"};",
											"",
											"pm.sendRequest(postProduct, function (err, response) {",
											"  if (err){",
											"      console.log(err);",
											"      return false;",
											"  }",
											"  const responseJson = response.json();",
											"  let ID = responseJson.id;",
											"  pm.environment.set('LOCALITY_ID', ID);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Test: Status code equals to 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Test: Status equals to OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Test: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Test: Should exist a body and be valid\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Test: Message under 4096 characters\", function() {",
											"    pm.expect(responseJson.message).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Test: Response JSON format\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Test: Header Content-Type equals not null\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Test: Performance (maximum response time)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Test: Validate message not null\", function () {",
											"    pm.expect(responseJson.message).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Test: Message locality deleted\", function() {",
											"    pm.expect(responseJson.message).to.eql(\"Locality successfully deleted.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/localities/{{LOCALITY_ID}}",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"localities",
										"{{LOCALITY_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Products",
					"item": [
						{
							"name": "Consult products",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Test: Status code equals to 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Test: Status equals to OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Test: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Test: Should exist a body and be valid\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Test: Name under 4096 characters\", function() {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.name).to.have.lengthOf.below(4096);",
											"    });",
											"});",
											"",
											"pm.test(\"Test: Description under 4096 characters\", function() {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.description).to.have.lengthOf.below(4096);",
											"    });",
											"});",
											"",
											"pm.test(\"Test: Response JSON format\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Test: Header Content-Type equals not null\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Test: Performance (maximum response time)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Test: Validate not null field name for each object\", function () {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.name).to.not.include(null);",
											"    });",
											"});",
											"",
											"pm.test(\"Test: Validate not null field description for each object\", function () {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.description).to.not.include(null);",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/products",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Consult product by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Test: Status code equals to 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Test: Status equals to OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Test: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Test: Should exist a body and be valid\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Test: Name under 4096 characters\", function() {",
											"    pm.expect(responseJson.name).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Test: Description under 4096 characters\", function() {",
											"    pm.expect(responseJson.description).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Test: Response JSON format\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Test: Header Content-Type equals not null\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Test: Performance (maximum response time)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Test: Validate not null field name\", function () {",
											"    pm.expect(responseJson.name).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Test: Validate not null field description\", function () {",
											"    pm.expect(responseJson.description).to.not.include(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/products/50",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"products",
										"50"
									]
								}
							},
							"response": []
						},
						{
							"name": "Inserting product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Test: Status code equals to 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Test: Status equals to OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Test: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Test: Should exist a body and be valid\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Test: Name under 4096 characters\", function() {",
											"        pm.expect(responseJson.name).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Test: Type under 4096 characters\", function() {",
											"        pm.expect(responseJson.type).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Test: Response JSON format\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Test: Header Content-Type equals not null\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Test: Performance (maximum response time)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Test: Validate not null field name \", function () {",
											"    pm.expect(responseJson.name).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Test: Validate not null field description\", function () {",
											"    pm.expect(responseJson.description).to.not.include(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n{\n  \"name\": \"Produto 1\",\n  \"description\": \"Descrição do Produto 1\",\n  \"state\": \"active\"\n},\n{\n  \"name\": \"Produto 2\",\n  \"description\": \"Descrição do Produto 2\",\n  \"state\": \"active\"\n},\n{\n  \"name\": \"Produto 3\",\n  \"description\": \"Descrição do Produto 3\",\n  \"state\": \"active\"\n},\n{\n  \"name\": \"Produto 4\",\n  \"description\": \"Descrição do Produto 4\",\n  \"state\": \"active\"\n},\n{\n  \"name\": \"Produto 5\",\n  \"description\": \"Descrição do Produto 5\",\n  \"state\": \"active\"\n},\n{\n  \"name\": \"Produto 6\",\n  \"description\": \"Descrição do Produto 6\",\n  \"state\": \"active\"\n},\n{\n  \"name\": \"Produto 7\",\n  \"description\": \"Descrição do Produto 7\",\n  \"state\": \"active\"\n},\n{\n  \"name\": \"Produto 8\",\n  \"description\": \"Descrição do Produto 8\",\n  \"state\": \"active\"\n},\n{\n  \"name\": \"Produto 9\",\n  \"description\": \"Descrição do Produto 9\",\n  \"state\": \"active\"\n},\n{\n  \"name\": \"Produto 10\",\n  \"description\": \"Descrição do Produto 10\",\n  \"state\": \"active\"\n},\n{\n  \"name\": \"Produto 11\",\n  \"description\": \"Descrição do Produto 11\",\n  \"state\": \"active\"\n},\n{\n  \"name\": \"Produto 12\",\n  \"description\": \"Descrição do Produto 12\",\n  \"state\": \"active\"\n},\n{\n  \"name\": \"Produto 13\",\n  \"description\": \"Descrição do Produto 13\",\n  \"state\": \"active\"\n},\n{\n  \"name\": \"Produto 14\",\n  \"description\": \"Descrição do Produto 14\",\n  \"state\": \"active\"\n},\n{\n  \"name\": \"Produto 15\",\n  \"description\": \"Descrição do Produto 15\",\n  \"state\": \"active\"\n},\n{\n  \"name\": \"Produto 16\",\n  \"description\": \"Descrição do Produto 16\",\n  \"state\": \"active\"\n},\n{\n  \"name\": \"Produto 17\",\n  \"description\": \"Descrição do Produto 17\",\n  \"state\": \"active\"\n},\n{\n  \"name\": \"Produto 18\",\n  \"description\": \"Descrição do Produto 18\",\n  \"state\": \"active\"\n},\n{\n  \"name\": \"Produto 19\",\n  \"description\": \"Descrição do Produto 19\",\n  \"state\": \"active\"\n},\n{\n  \"name\": \"Produto 20\",\n  \"description\": \"Descrição do Produto 20\",\n  \"state\": \"active\"\n},\n{\n  \"name\": \"Produto 21\",\n  \"description\": \"Descrição do Produto 21\",\n  \"state\": \"active\"\n},\n{\n  \"name\": \"Produto 22\",\n  \"description\": \"Descrição do Produto 22\",\n  \"state\": \"active\"\n},\n{\n  \"name\": \"Produto 23\",\n  \"description\": \"Descrição do Produto 23\",\n  \"state\": \"active\"\n},\n{\n  \"name\": \"Produto 24\",\n  \"description\": \"Descrição do Produto 24\",\n  \"state\": \"active\"\n},\n{\n  \"name\": \"Produto 25\",\n  \"description\": \"Descrição do Produto 25\",\n  \"state\": \"active\"\n},\n{\n  \"name\": \"Produto 26\",\n  \"description\": \"Descrição do Produto 26\",\n  \"state\": \"active\"\n},\n{\n  \"name\": \"Produto 27\",\n  \"description\": \"Descrição do Produto 27\",\n  \"state\": \"active\"\n},\n{\n  \"name\": \"Produto 28\",\n  \"description\": \"Descrição do Produto 28\",\n  \"state\": \"active\"\n},\n{\n  \"name\": \"Produto 29\",\n  \"description\": \"Descrição do Produto 29\",\n  \"state\": \"active\"\n},\n{\n  \"name\": \"Produto 30\",\n  \"description\": \"Descrição do Produto 30\",\n  \"state\": \"active\"\n},\n{\n  \"name\": \"Produto 31\",\n  \"description\": \"Descrição do Produto 31\",\n  \"state\": \"active\"\n},\n{\n  \"name\": \"Produto 32\",\n  \"description\": \"Descrição do Produto 32\",\n  \"state\": \"active\"\n},\n{\n  \"name\": \"Produto 33\",\n  \"description\": \"Descrição do Produto 33\",\n  \"state\": \"active\"\n},\n{\n  \"name\": \"Produto 34\",\n  \"description\": \"Descrição do Produto 34\",\n  \"state\": \"active\"\n},\n{\n  \"name\": \"Produto 35\",\n  \"description\": \"Descrição do Produto 35\",\n  \"state\": \"active\"\n},\n{\n  \"name\": \"Produto 36\",\n  \"description\": \"Descrição do Produto 36\",\n  \"state\": \"active\"\n},\n{\n  \"name\": \"Produto 37\",\n  \"description\": \"Descrição do Produto 37\",\n  \"state\": \"active\"\n},\n{\n  \"name\": \"Produto 38\",\n  \"description\": \"Descrição do Produto 38\",\n  \"state\": \"active\"\n},\n{\n  \"name\": \"Produto 39\",\n  \"description\": \"Descrição do Produto 39\",\n  \"state\": \"active\"\n},\n{\n  \"name\": \"Produto 40\",\n  \"description\": \"Descrição do Produto 40\",\n  \"state\": \"active\"\n},\n{\n  \"name\": \"Produto 41\",\n  \"description\": \"Descrição do Produto 41\",\n  \"state\": \"active\"\n},\n{\n  \"name\": \"Produto 42\",\n  \"description\": \"Descrição do Produto 42\",\n  \"state\": \"active\"\n},\n{\n  \"name\": \"Produto 43\",\n  \"description\": \"Descrição do Produto 43\",\n  \"state\": \"active\"\n},\n{\n  \"name\": \"Produto 44\",\n  \"description\": \"Descrição do Produto 44\",\n  \"state\": \"active\"\n},\n{\n  \"name\": \"Produto 45\",\n  \"description\": \"Descrição do Produto 45\",\n  \"state\": \"active\"\n},\n{\n  \"name\": \"Produto 46\",\n  \"description\": \"Descrição do Produto 46\",\n  \"state\": \"active\"\n},\n{\n  \"name\": \"Produto 47\",\n  \"description\": \"Descrição do Produto 47\",\n  \"state\": \"active\"\n},\n{\n  \"name\": \"Produto 48\",\n  \"description\": \"Descrição do Produto 48\",\n  \"state\": \"active\"\n},\n{\n  \"name\": \"Produto 49\",\n  \"description\": \"Descrição do Produto 49\",\n  \"state\": \"active\"\n},\n{\n  \"name\": \"Produto 50\",\n  \"description\": \"Descrição do Produto 50\",\n  \"state\": \"active\"\n}\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/products",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Updating product by id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const postProduct = {",
											"  url: pm.variables.get('APP_DOMAIN_AND_PORT') + '/products',",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json; charset=utf-8',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({",
											"    'name': 'Product name ' + pm.environment.get('RANDOM_NAME'),",
											"    'description': 'Product description ' + pm.environment.get('RANDOM_NAME')",
											"    })",
											"  }",
											"};",
											"",
											"pm.sendRequest(postProduct, function (err, response) {",
											"  if (err){",
											"      console.log(err);",
											"      return false;",
											"  }",
											"  const responseJson = response.json();",
											"  let ID = responseJson.id;",
											"  pm.environment.set('PRODUCT_ID', ID);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Test: Status code equals to 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Test: Status equals to OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Test: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Test: Should exist a body and be valid\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Test: Name under 4096 characters\", function() {",
											"        pm.expect(responseJson.name).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Test: Description under 4096 characters\", function() {",
											"        pm.expect(responseJson.description).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Test: Response JSON format\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Test: Header Content-Type equals not null\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Test: Performance (maximum response time)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Test: Validate not null field name \", function () {",
											"    pm.expect(responseJson.name).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Test: Validate not null field description\", function () {",
											"    pm.expect(responseJson.description).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Test: Updated product name\", function() {",
											"    pm.expect(responseJson.name).to.eql(\"Product \" + pm.environment.get('RANDOM_NAME') + \" updated\");",
											"});",
											"",
											"pm.test(\"Test: Updated product description\", function() {",
											"    pm.expect(responseJson.description).to.eql(\"Product description \" + pm.environment.get('RANDOM_NAME') + \" updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Product {{RANDOM_NAME}} updated\",\n  \"description\": \"Product description {{RANDOM_NAME}} updated\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/products/{{PRODUCT_ID}}",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"products",
										"{{PRODUCT_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deleting product by id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const postProduct = {",
											"  url: pm.variables.get('APP_DOMAIN_AND_PORT') + '/products',",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json; charset=utf-8',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({",
											"    'name': 'Product name ' + pm.environment.get('RANDOM_NAME'),",
											"    'description': 'Product description ' + pm.environment.get('RANDOM_NAME')",
											"    })",
											"  }",
											"};",
											"",
											"pm.sendRequest(postProduct, function (err, response) {",
											"  if (err){",
											"      console.log(err);",
											"      return false;",
											"  }",
											"  const responseJson = response.json();",
											"  let ID = responseJson.id;",
											"  pm.environment.set('PRODUCT_ID', ID);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Test: Status code equals to 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Test: Status equals to OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Test: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Test: Should exist a body and be valid\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Test: Message under 4096 characters\", function() {",
											"    pm.expect(responseJson.message).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Test: Response JSON format\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Test: Header Content-Type equals not null\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Test: Performance (maximum response time)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Test: Validate message not null\", function () {",
											"    pm.expect(responseJson.message).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Test: Message product deleted\", function() {",
											"    pm.expect(responseJson.message).to.eql(\"Product successfully deleted.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/products/{{PRODUCT_ID}}",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"products",
										"{{PRODUCT_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Carriers",
					"item": [
						{
							"name": "Consult carriers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Test: Status code equals to 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Test: Status equals to OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Test: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Test: Should exist a body and be valid\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Test: Name under 4096 characters\", function() {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.name).to.have.lengthOf.below(4096);",
											"    });",
											"});",
											"",
											"pm.test(\"Test: Contact under 4096 characters\", function() {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.contact).to.have.lengthOf.below(4096);",
											"    });",
											"});",
											"",
											"pm.test(\"Test: Response JSON format\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Test: Header Content-Type equals not null\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Test: Performance (maximum response time)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Test: Validate not null field name for each object\", function () {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.name).to.not.include(null);",
											"    });",
											"});",
											"",
											"pm.test(\"Test: Validate not null field contact for each object\", function () {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.contact).to.not.include(null);",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/carriers",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"carriers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Consult product by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Test: Status code equals to 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Test: Status equals to OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Test: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Test: Should exist a body and be valid\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Test: Name under 4096 characters\", function() {",
											"        pm.expect(responseJson.name).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Test: Contact under 4096 characters\", function() {",
											"        pm.expect(responseJson.contact).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Test: Response JSON format\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Test: Header Content-Type equals not null\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Test: Performance (maximum response time)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Test: Validate not null field name\", function () {",
											"        pm.expect(responseJson.name).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Test: Validate not null field contact\", function () {",
											"        pm.expect(responseJson.contact).to.not.include(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/carriers/1",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"carriers",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Inserting carrier",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Test: Status code equals to 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Test: Status equals to OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Test: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Test: Should exist a body and be valid\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Test: Name under 4096 characters\", function() {",
											"        pm.expect(responseJson.name).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Test: Contact under 4096 characters\", function() {",
											"        pm.expect(responseJson.contact).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Test: Response JSON format\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Test: Header Content-Type equals not null\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Test: Performance (maximum response time)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Test: Validate not null field name \", function () {",
											"    pm.expect(responseJson.name).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Test: Validate not null field contact\", function () {",
											"    pm.expect(responseJson.contact).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Test: Registered carrier contact\", function() {",
											"    pm.expect(responseJson.contact).to.eql(pm.environment.get('RANDOM_NAME') + '@' + pm.environment.get('RANDOM_NAME') + '.com');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n{\n  \"name\": \"Carrier name {{RANDOM_NAME}}\",\n  \"contact\": \"{{RANDOM_NAME}}@{{RANDOM_NAME}}.com\"\n},\n{\n  \"name\": \"Carrier name {{RANDOM_NAME}}\",\n  \"contact\": \"{{RANDOM_NAME}}@{{RANDOM_NAME}}.com\"\n}\n]\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/carriers",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"carriers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Updating carrier by id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const postCarrier = {",
											"  url: pm.variables.get('APP_DOMAIN_AND_PORT') + '/carriers',",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json; charset=utf-8',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({",
											"    'name': 'Carrier name ' + pm.environment.get('RANDOM_NAME'),",
											"    'contact': pm.environment.get('RANDOM_NAME') + '@' + pm.environment.get('RANDOM_NAME') + '.com'",
											"    })",
											"  }",
											"};",
											"",
											"pm.sendRequest(postCarrier, function (err, response) {",
											"  if (err){",
											"      console.log(err);",
											"      return false;",
											"  }",
											"  const responseJson = response.json();",
											"  let ID = responseJson.id;",
											"  pm.environment.set('CARRIER_ID', ID);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Test: Status code equals to 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Test: Status equals to OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Test: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Test: Should exist a body and be valid\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Test: Name under 4096 characters\", function() {",
											"        pm.expect(responseJson.name).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Test: Contact under 4096 characters\", function() {",
											"        pm.expect(responseJson.contact).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Test: Response JSON format\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Test: Header Content-Type equals not null\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Test: Performance (maximum response time)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Test: Validate not null field name \", function () {",
											"    pm.expect(responseJson.name).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Test: Validate not null field contact\", function () {",
											"    pm.expect(responseJson.contact).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Test: Updated carrier contact\", function() {",
											"    pm.expect(responseJson.contact).to.eql(pm.environment.get('RANDOM_NAME') + '@' + pm.environment.get('RANDOM_NAME') + '.com.br');",
											"});",
											"",
											"pm.test(\"Teste: Updated carrier name\", function() {",
											"    pm.expect(responseJson.name).to.eql(\"Carrier \" + pm.environment.get('RANDOM_NAME') + \" updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Carrier {{RANDOM_NAME}} updated\",\n  \"contact\": \"{{RANDOM_NAME}}@{{RANDOM_NAME}}.com.br\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/carriers/{{CARRIER_ID}}",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"carriers",
										"{{CARRIER_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deleting product by id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const postCarrier = {",
											"  url: pm.variables.get('APP_DOMAIN_AND_PORT') + '/carriers',",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json; charset=utf-8',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({",
											"    'name': 'Carrier name ' + pm.environment.get('RANDOM_NAME'),",
											"    'contact': pm.environment.get('RANDOM_NAME') + '@' + pm.environment.get('RANDOM_NAME') + '.com'",
											"    })",
											"  }",
											"};",
											"",
											"pm.sendRequest(postCarrier, function (err, response) {",
											"  if (err){",
											"      console.log(err);",
											"      return false;",
											"  }",
											"  const responseJson = response.json();",
											"  let ID = responseJson.id;",
											"  pm.environment.set('CARRIER_ID', ID);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Test: Status code equals to 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Test: Status equals to OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Test: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Test: Should exist a body and be valid\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Test: Message under 4096 characters\", function() {",
											"    pm.expect(responseJson.message).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Test: Response JSON format\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Test: Header Content-Type equals not null\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Test: Performance (maximum response time)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Test: Validate message not null\", function () {",
											"    pm.expect(responseJson.message).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Test: Message carrier deleted\", function() {",
											"    pm.expect(responseJson.message).to.eql(\"Carrier successfully deleted.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/carriers/{{CARRIER_ID}}",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"carriers",
										"{{CARRIER_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Vehicles",
					"item": [
						{
							"name": "Consult vehicles",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Test: Status code equals to 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Test: Status equals to OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Test: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Test: Should exist a body and be valid\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Test: Name under 4096 characters\", function() {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.name).to.have.lengthOf.below(4096);",
											"    });",
											"});",
											"",
											"pm.test(\"Test: Model under 4096 characters\", function() {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.model).to.have.lengthOf.below(4096);",
											"    });",
											"});",
											"",
											"pm.test(\"Test: License plate under 4096 characters\", function() {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.license_plate).to.have.lengthOf.below(4096);",
											"    });",
											"});",
											"",
											"pm.test(\"Test: Response JSON format\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Test: Header Content-Type equals not null\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Test: Performance (maximum response time)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Test: Validate not null field name for each object\", function () {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.name).to.not.include(null);",
											"    });",
											"});",
											"",
											"pm.test(\"Test: Validate not null field model for each object\", function () {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.model).to.not.include(null);",
											"    });",
											"});",
											"",
											"pm.test(\"Test: Validate not null field lisence plate for each object\", function () {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.license_plate).to.not.include(null);",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/vehicles",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"vehicles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Consult vehicle by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Test: Status code equals to 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Test: Status equals to OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Test: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Test: Should exist a body and be valid\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Test: Name under 4096 characters\", function() {",
											"        pm.expect(responseJson.name).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Test: Model under 4096 characters\", function() {",
											"        pm.expect(responseJson.model).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Test: License plate under 4096 characters\", function() {",
											"        pm.expect(responseJson.license_plate).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Test: Response JSON format\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Test: Header Content-Type equals not null\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Test: Performance (maximum response time)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Test: Validate not null field name\", function () {",
											"        pm.expect(responseJson.name).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Test: Validate not null field model\", function () {",
											"        pm.expect(responseJson.model).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Test: Validate not null field license plate\", function () {",
											"        pm.expect(responseJson.license_plate).to.not.include(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Cache-Control",
										"value": "no-cache",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/vehicles/1",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"vehicles",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Inserting vehicle",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Test: Status code equals to 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Test: Status equals to OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Test: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Test: Should exist a body and be valid\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Test: Name under 4096 characters\", function() {",
											"        pm.expect(responseJson.name).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Test: Model under 4096 characters\", function() {",
											"        pm.expect(responseJson.model).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Test: License plate under 4096 characters\", function() {",
											"        pm.expect(responseJson.license_plate).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Test: Response JSON format\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Test: Header Content-Type equals not null\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Test: Performance (maximum response time)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Test: Validate not null field name\", function () {",
											"        pm.expect(responseJson.name).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Test: Validate not null field model\", function () {",
											"        pm.expect(responseJson.model).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Test: Validate not null field license plate\", function () {",
											"        pm.expect(responseJson.license_plate).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Test: Vehicle name registered\", function() {",
											"    pm.expect(responseJson.name).to.eql(\"Vehicle name \" + pm.environment.get(\"RANDOM_NAME\"));",
											"});",
											"",
											"pm.test(\"Test: Vehicle model registered\", function() {",
											"    pm.expect(responseJson.model).to.eql(\"Vehicle model \" + pm.environment.get(\"RANDOM_NAME\"));",
											"});",
											"",
											"pm.test(\"Test: Vehicle plate registered\", function() {",
											"    pm.expect(responseJson.license_plate).to.eql(pm.environment.get(\"RANDOM_VEHICLEID\"));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n{\n  \"name\": \"Vehicle name {{RANDOM_NAME}}\",\n  \"model\": \"Vehicle model {{RANDOM_NAME}}\",\n  \"license_plate\": \"{{RANDOM_VEHICLEID}}\"\n},\n{\n  \"name\": \"Vehicle name {{RANDOM_NAME}}\",\n  \"model\": \"Vehicle model {{RANDOM_NAME}}\",\n  \"license_plate\": \"{{RANDOM_VEHICLEID}}\"\n}\n]\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/vehicles",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"vehicles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Updating vehicle by id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const postVehicle = {",
											"  url: pm.variables.get('APP_DOMAIN_AND_PORT') + '/vehicles',",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json; charset=utf-8',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({",
											"    'name': 'Vehicle name ' + pm.environment.get('RANDOM_NAME'),",
											"    'model': 'Vehicle model' + pm.environment.get('RANDOM_NAME'),",
											"    'license_plate': pm.environment.get('RANDOM_VEHICLEID')",
											"    })",
											"  }",
											"};",
											"",
											"pm.sendRequest(postVehicle, function (err, response) {",
											"  if (err){",
											"      console.log(err);",
											"      return false;",
											"  }",
											"  const responseJson = response.json();",
											"  let ID = responseJson.id;",
											"  pm.environment.set('VEHICLE_ID', ID);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Test: Status code equals to 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Test: Status equals to OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Test: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Test: Should exist a body and be valid\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Test: Name under 4096 characters\", function() {",
											"        pm.expect(responseJson.name).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Test: Model under 4096 characters\", function() {",
											"        pm.expect(responseJson.model).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Test: License plate under 4096 characters\", function() {",
											"        pm.expect(responseJson.license_plate).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Test: Response JSON format\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Test: Header Content-Type equals not null\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Test: Performance (maximum response time)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Test: Validate not null field name\", function () {",
											"        pm.expect(responseJson.name).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Test: Validate not null field model\", function () {",
											"        pm.expect(responseJson.model).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Test: Validate not null field license plate\", function () {",
											"        pm.expect(responseJson.license_plate).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Nome do veículo cadastrado\", function() {",
											"    pm.expect(responseJson.name).to.eql(\"Vehicle \" + pm.environment.get(\"RANDOM_NAME\") + \" updated\");",
											"});",
											"",
											"pm.test(\"Test: Vehicle model registered\", function() {",
											"    pm.expect(responseJson.model).to.eql(\"Model \" + pm.environment.get(\"RANDOM_NAME\") + \" updated\");",
											"});",
											"",
											"pm.test(\"Test: License plate registered\", function() {",
											"    pm.expect(responseJson.license_plate).to.eql(pm.environment.get(\"RANDOM_VEHICLEID\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Vehicle {{RANDOM_NAME}} updated\",\n  \"model\": \"Model {{RANDOM_NAME}} updated\",\n  \"license_plate\": \"{{RANDOM_VEHICLEID}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/vehicles/{{VEHICLE_ID}}",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"vehicles",
										"{{VEHICLE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deleting vehicle by id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const postVehicle = {",
											"  url: pm.variables.get('APP_DOMAIN_AND_PORT') + '/vehicles',",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json; charset=utf-8',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({",
											"    'name': 'Vehicle name ' + pm.environment.get('RANDOM_NAME'),",
											"    'model': 'Vehicle model' + pm.environment.get('RANDOM_NAME'),",
											"    'license_plate': pm.environment.get('RANDOM_VEHICLEID')",
											"    })",
											"  }",
											"};",
											"",
											"pm.sendRequest(postVehicle, function (err, response) {",
											"  if (err){",
											"      console.log(err);",
											"      return false;",
											"  }",
											"  const responseJson = response.json();",
											"  let ID = responseJson.id;",
											"  pm.environment.set('VEHICLE_ID', ID);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Test: Status code equals to 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Test: Status equals to OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Test: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Test: Should exist a body and be valid\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Test: Message under 4096 characters\", function() {",
											"    pm.expect(responseJson.message).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Test: Response JSON format\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Test: Header Content-Type equals not null\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Test: Performance (maximum response time)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Test: Validate message not null\", function () {",
											"    pm.expect(responseJson.message).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Test: Message vehicle deleted\", function() {",
											"    pm.expect(responseJson.message).to.eql(\"Vehicle successfully deleted.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/vehicles/{{VEHICLE_ID}}",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"vehicles",
										"{{VEHICLE_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function generateVehicleIdentification(){",
									"  const ALPHABET = [",
									"    'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',",
									"  ];",
									"  let letter = [];",
									"  for (let i = 0; i < 4; i++) {",
									"    const number = (Math.random() * 100).toFixed(0);",
									"    const numberResult = parseFloat(number);",
									"    numberResult <= 25 ? letter.push(ALPHABET[numberResult]) : i--;",
									"  }",
									"  let number = [];",
									"  for (let i = 0; i < 3; i++) {",
									"    number.push(Math.floor(Math.random() * 9));",
									"  }",
									"  return `${letter[0]}${letter[1]}${letter[2]}${number[0]}${letter[3]}${number[1]}${number[2]}`;",
									"}",
									"",
									"const randomVehicleId = generateVehicleIdentification();",
									"pm.environment.set(\"RANDOM_VEHICLEID\", randomVehicleId);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Trips",
					"item": [
						{
							"name": "Consult trip by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//TODO EXPAND THE TESTS",
											"",
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Test: Status code equals to 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Test: Status equals to OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Test: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Test: Should exist a body and be valid\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Test: Leaving date under 4096 characters\", function() {",
											"        pm.expect(responseJson.leaving_date).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Test: Arrival date under 4096 characters\", function() {",
											"        pm.expect(responseJson.arrival_date).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Test: Response JSON format\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Test: Header Content-Type equals not null\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Test: Performance (maximum response time)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Test: Validate not null field leaving date\", function () {",
											"        pm.expect(responseJson.leaving_date).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Test: Validate not null field arrival date\", function () {",
											"        pm.expect(responseJson.arrival_date).to.not.include(null);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Cache-Control",
										"value": "no-cache",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/trips/1",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"trips",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Consult trips",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Test: Status code equals to 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Test: Status equals to OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Test: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Test: Should exist a body and be valid\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Test: Leaving date under 4096 characters\", function() {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.leaving_date).to.have.lengthOf.below(4096);",
											"    });",
											"});",
											"",
											"pm.test(\"Test: Arrival date under 4096 characters\", function() {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.arrival_date).to.have.lengthOf.below(4096);",
											"    });",
											"});",
											"",
											"pm.test(\"Test: Response JSON format\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Test: Header Content-Type equals not null\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Test: Performance (maximum response time)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Test: Validate not null field leaving date for each object\", function () {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.leaving_date).to.not.include(null);",
											"    });",
											"});",
											"",
											"pm.test(\"Test: Validate not null field arrival date for each object\", function () {",
											"    _.each(responseJson, function (obj) {",
											"        pm.expect(obj.arrival_date).to.not.include(null);",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/trips",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"trips"
									]
								}
							},
							"response": []
						},
						{
							"name": "Inserting trip",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//TODO EXPAND THE TESTS",
											"",
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Test: Status code equals to 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Test: Status equals to OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Test: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Test: Should exist a body and be valid\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Test: Leaving date under 4096 characters\", function() {",
											"        pm.expect(responseJson.leaving_date).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Test: Arrival date under 4096 characters\", function() {",
											"        pm.expect(responseJson.arrival_date).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Test: Response JSON format\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Test: Header Content-Type equals not null\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Test: Performance (maximum response time)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Test: Validate not null field leaving date\", function () {",
											"        pm.expect(responseJson.leaving_date).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Test: Validate not null field arrival date\", function () {",
											"        pm.expect(responseJson.arrival_date).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Test: Leaving date registered\", function() {",
											"    pm.expect(responseJson.leaving_date).to.eql(\"2024-08-20T11:00:00.000Z\");",
											"});",
											"",
											"pm.test(\"Test: Arrival date registered\", function() {",
											"    pm.expect(responseJson.arrival_date).to.eql(\"2024-08-25T11:00:00.000Z\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function generateVehicleIdentification(){",
											"  const ALPHABET = [",
											"    'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',",
											"  ];",
											"  let letter = [];",
											"  for (let i = 0; i < 4; i++) {",
											"    const number = (Math.random() * 100).toFixed(0);",
											"    const numberResult = parseFloat(number);",
											"    numberResult <= 25 ? letter.push(ALPHABET[numberResult]) : i--;",
											"  }",
											"  let number = [];",
											"  for (let i = 0; i < 3; i++) {",
											"    number.push(Math.floor(Math.random() * 9));",
											"  }",
											"  return `${letter[0]}${letter[1]}${letter[2]}${number[0]}${letter[3]}${number[1]}${number[2]}`;",
											"}",
											"",
											"const randomVehicleId = generateVehicleIdentification();",
											"pm.environment.set(\"RANDOM_VEHICLEID\", randomVehicleId);",
											"",
											"const postVehicle = {",
											"  url: pm.variables.get('APP_DOMAIN_AND_PORT') + '/vehicles',",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json; charset=utf-8',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({",
											"    'name': 'Vehicle name ' + pm.environment.get('RANDOM_NAME'),",
											"    'model': 'Vehicle model' + pm.environment.get('RANDOM_NAME'),",
											"    'license_plate': pm.environment.get('RANDOM_VEHICLEID')",
											"    })",
											"  }",
											"};",
											"",
											"pm.sendRequest(postVehicle, function (err, response) {",
											"  if (err){",
											"      console.log(err);",
											"      return false;",
											"  }",
											"  const responseJson = response.json();",
											"  let ID = responseJson.id;",
											"  pm.environment.set('VEHICLE_ID', ID);",
											"});",
											"",
											"// ----",
											"",
											"const postCarrier = {",
											"  url: pm.variables.get('APP_DOMAIN_AND_PORT') + '/carriers',",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json; charset=utf-8',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({",
											"    'name': 'Carrier name ' + pm.environment.get('RANDOM_NAME'),",
											"    'contact': pm.environment.get('RANDOM_NAME') + '@' + pm.environment.get('RANDOM_NAME') + '.com'",
											"    })",
											"  }",
											"};",
											"",
											"pm.sendRequest(postCarrier, function (err, response) {",
											"  if (err){",
											"      console.log(err);",
											"      return false;",
											"  }",
											"  const responseJson = response.json();",
											"  let ID = responseJson.id;",
											"  pm.environment.set('CARRIER_ID', ID);",
											"});",
											"",
											"// ----",
											"",
											"const postProduct = {",
											"  url: pm.variables.get('APP_DOMAIN_AND_PORT') + '/products',",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json; charset=utf-8',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({",
											"    'name': 'Product ' + pm.environment.get('RANDOM_NAME'),",
											"    'description': 'Product description' + pm.environment.get('RANDOM_NAME')",
											"    })",
											"  }",
											"};",
											"",
											"pm.sendRequest(postProduct, function (err, response) {",
											"  if (err){",
											"      console.log(err);",
											"      return false;",
											"  }",
											"  const responseJson = response.json();",
											"  let ID = responseJson.id;",
											"  pm.environment.set('PRODUCT_ID', ID);",
											"});",
											"",
											"// ----",
											"",
											"const postLocalityDestination = {",
											"  url: pm.variables.get('APP_DOMAIN_AND_PORT') + '/localities',",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json; charset=utf-8',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({",
											"    'name': 'Locality name ' + pm.environment.get('RANDOM_NAME'),",
											"    'type': 'destination'",
											"    })",
											"  }",
											"};",
											"",
											"pm.sendRequest(postLocalityDestination, function (err, response) {",
											"  if (err){",
											"      console.log(err);",
											"      return false;",
											"  }",
											"  const responseJson = response.json();",
											"  let ID = responseJson.id;",
											"  pm.environment.set('DESTINATIONLOCALITY_ID', ID);",
											"});",
											"",
											"// ----",
											"",
											"const postLocalityOrigin = {",
											"  url: pm.variables.get('APP_DOMAIN_AND_PORT') + '/localities',",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json; charset=utf-8',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({",
											"    'name': 'Locality name ' + pm.environment.get('RANDOM_NAME'),",
											"    'type': 'origin'",
											"    })",
											"  }",
											"};",
											"",
											"pm.sendRequest(postLocalityOrigin, function (err, response) {",
											"  if (err){",
											"      console.log(err);",
											"      return false;",
											"  }",
											"  const responseJson = response.json();",
											"  let ID = responseJson.id;",
											"  pm.environment.set('ORIGINLOCALITY_ID', ID);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n{\n  \"origin_id\": \"{{ORIGINLOCALITY_ID}}\",\n  \"destination_id\": \"{{DESTINATIONLOCALITY_ID}}\",\n  \"product_id\": \"{{PRODUCT_ID}}\",\n  \"carrier_id\": \"{{CARRIER_ID}}\",\n  \"vehicle_id\": \"{{VEHICLE_ID}}\",\n  \"leaving_date\": \"2024-08-20 08:00:00.00Z\",\n  \"arrival_date\": \"2024-08-25 08:00:00.00Z\"\n},\n{\n  \"origin_id\": \"{{ORIGINLOCALITY_ID}}\",\n  \"destination_id\": \"{{DESTINATIONLOCALITY_ID}}\",\n  \"product_id\": \"{{PRODUCT_ID}}\",\n  \"carrier_id\": \"{{CARRIER_ID}}\",\n  \"vehicle_id\": \"{{VEHICLE_ID}}\",\n  \"leaving_date\": \"2024-08-20 08:00:00.00Z\",\n  \"arrival_date\": \"2024-08-25 08:00:00.00Z\"\n}\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/trips",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"trips"
									]
								}
							},
							"response": []
						},
						{
							"name": "Exclusão de Viagem por id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											" //STILL WORKING IN THAT TEST!",
											" ",
											" function generateVehicleIdentification(){",
											"  const ALPHABET = [",
											"    'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',",
											"  ];",
											"  let letter = [];",
											"  for (let i = 0; i < 4; i++) {",
											"    const number = (Math.random() * 100).toFixed(0);",
											"    const numberResult = parseFloat(number);",
											"    numberResult <= 25 ? letter.push(ALPHABET[numberResult]) : i--;",
											"  }",
											"  let number = [];",
											"  for (let i = 0; i < 3; i++) {",
											"    number.push(Math.floor(Math.random() * 9));",
											"  }",
											"  return `${letter[0]}${letter[1]}${letter[2]}${number[0]}${letter[3]}${number[1]}${number[2]}`;",
											"}",
											"",
											"const randomVehicleId = generateVehicleIdentification();",
											"pm.environment.set(\"RANDOM_VEHICLEID\", randomVehicleId);",
											"",
											"const postVehicle = {",
											"  url: pm.variables.get('APP_DOMAIN_AND_PORT') + '/vehicles',",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json; charset=utf-8',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({",
											"    'name': 'Vehicle name ' + pm.environment.get('RANDOM_NAME'),",
											"    'model': 'Vehicle model' + pm.environment.get('RANDOM_NAME'),",
											"    'license_plate': pm.environment.get('RANDOM_VEHICLEID')",
											"    })",
											"  }",
											"};",
											"",
											"pm.sendRequest(postVehicle, function (err, response) {",
											"  if (err){",
											"      console.log(err);",
											"      return false;",
											"  }",
											"  const responseJson = response.json();",
											"  let ID = responseJson.id;",
											"  pm.environment.set('VEHICLE_ID', ID);",
											"});",
											"",
											"// ----",
											"",
											"const postCarrier = {",
											"  url: pm.variables.get('APP_DOMAIN_AND_PORT') + '/carriers',",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json; charset=utf-8',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({",
											"    'name': 'Carrier name ' + pm.environment.get('RANDOM_NAME'),",
											"    'contact': pm.environment.get('RANDOM_NAME') + '@' + pm.environment.get('RANDOM_NAME') + '.com'",
											"    })",
											"  }",
											"};",
											"",
											"pm.sendRequest(postCarrier, function (err, response) {",
											"  if (err){",
											"      console.log(err);",
											"      return false;",
											"  }",
											"  const responseJson = response.json();",
											"  let ID = responseJson.id;",
											"  pm.environment.set('CARRIER_ID', ID);",
											"});",
											"",
											"// ----",
											"",
											"const postProduct = {",
											"  url: pm.variables.get('APP_DOMAIN_AND_PORT') + '/products',",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json; charset=utf-8',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({",
											"    'name': 'Product ' + pm.environment.get('RANDOM_NAME'),",
											"    'description': 'Product description' + pm.environment.get('RANDOM_NAME')",
											"    })",
											"  }",
											"};",
											"",
											"pm.sendRequest(postProduct, function (err, response) {",
											"  if (err){",
											"      console.log(err);",
											"      return false;",
											"  }",
											"  const responseJson = response.json();",
											"  let ID = responseJson.id;",
											"  pm.environment.set('PRODUCT_ID', ID);",
											"});",
											"",
											"// ----",
											"",
											"const postLocalityDestination = {",
											"  url: pm.variables.get('APP_DOMAIN_AND_PORT') + '/localities',",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json; charset=utf-8',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({",
											"    'name': 'Locality name ' + pm.environment.get('RANDOM_NAME'),",
											"    'type': 'destination'",
											"    })",
											"  }",
											"};",
											"",
											"pm.sendRequest(postLocalityDestination, function (err, response) {",
											"  if (err){",
											"      console.log(err);",
											"      return false;",
											"  }",
											"  const responseJson = response.json();",
											"  let ID = responseJson.id;",
											"  pm.environment.set('DESTINATIONLOCALITY_ID', ID);",
											"});",
											"",
											"// ----",
											"",
											"const postLocalityOrigin = {",
											"  url: pm.variables.get('APP_DOMAIN_AND_PORT') + '/localities',",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json; charset=utf-8',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({",
											"    'name': 'Locality name ' + pm.environment.get('RANDOM_NAME'),",
											"    'type': 'origin'",
											"    })",
											"  }",
											"};",
											"",
											"pm.sendRequest(postLocalityOrigin, function (err, response) {",
											"  if (err){",
											"      console.log(err);",
											"      return false;",
											"  }",
											"  const responseJson = response.json();",
											"  let ID = responseJson.id;",
											"  pm.environment.set('ORIGINLOCALITY_ID', ID);",
											"});",
											"",
											"const postTrip = {",
											"url: pm.variables.get('APP_DOMAIN_AND_PORT') + '/trips',",
											"method: 'POST',",
											"header: {",
											"    'Content-Type': 'application/json; charset=utf-8',",
											"},",
											"body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({",
											"    'origin_id': pm.environment.get('ORIGINLOCALITY_ID'),",
											"    'destination_id': pm.environment.get('DESTINATIONLOCALITY_ID'),",
											"    'product_id': pm.environment.get('PRODUCT_ID'),",
											"    'carrier_id': pm.environment.get('CARRIER_ID'),",
											"    'vehicle_id': pm.environment.get('VEHICLE_ID'),",
											"    'leaving_date': '2024-08-20 08:00:00.00Z',",
											"    'arrival_date': '2024-08-25 08:00:00.00Z'",
											"    })",
											" }",
											"};",
											"console.log(pm.environment.get('ORIGINLOCALITY_ID'))",
											"console.log(pm.environment.get('DESTINATIONLOCALITY_ID'))",
											"console.log(pm.environment.get('PRODUCT_ID'))",
											"console.log(pm.environment.get('CARRIER_ID'))",
											"console.log(pm.environment.get('VEHICLE_ID'))",
											"",
											"pm.sendRequest(postTrip, function (err, response) {",
											"if (err){",
											"    console.log(err);",
											"    return false;",
											"}",
											"const responseJson = response.json();",
											"let ID = responseJson.id;",
											"pm.environment.set('TRIP_ID', ID);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Teste: Status code igual a 200\", function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Teste: Status igual a OK\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Teste: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Teste: Deve existir um body e o mesmo ser válido\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Teste: Mensagem abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.message).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Resposta em formato JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Teste: Header Content-Type igual não nulo\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Desempenho (tempo de resposta máximo)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Teste: Validar message não nulo\", function () {",
											"    pm.expect(responseJson.message).to.not.include(null);",
											"});",
											"",
											"pm.test(\"Teste: Mensagem de transportadora excluída\", function() {",
											"    pm.expect(responseJson.message).to.eql(\"Viagem excluída com sucesso.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/trips/{{TRIP_ID}}",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"trips",
										"{{TRIP_ID}}"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Failure",
			"item": [
				{
					"name": "Localidades",
					"item": []
				},
				{
					"name": "Produtos",
					"item": [
						{
							"name": "Consulta de Produto por id inexistente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Teste: Status code igual a 404\", function() {",
											"    pm.expect(pm.response.code).to.equal(404);",
											"});",
											"",
											"pm.test(\"Teste: Status igual a Not Found\", function() {",
											"    pm.response.to.have.status(\"Not Found\");",
											"});",
											"",
											"pm.test(\"Teste: Content-Type contem application/json; charset=utf-8\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Teste: Deve existir um body e o mesmo ser válido\", function () {",
											"    pm.response.to.be.notFound;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Teste: Descrição abaixo de 4096 caracteres\", function() {",
											"    pm.expect(responseJson.error).to.have.lengthOf.below(4096);",
											"});",
											"",
											"pm.test(\"Teste: Resposta em formato JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Teste: Header Content-Type igual não nulo\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.not.eql(null);",
											"});",
											"",
											"pm.test(\"Teste: Desempenho (tempo de resposta máximo)\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo nome não nulo\", function () {",
											"    pm.expect(responseJson.nome).to.be.not.eql(null);",
											"});",
											"",
											"pm.test(\"Teste: Validar o campo descricao não nulo\", function () {",
											"    pm.expect(responseJson.descricao).to.be.not.eql(null);",
											"});",
											"",
											"pm.test(\"Teste: Descrição de mensagem de produto não encontrado\", function() {",
											"    pm.expect(responseJson.error).to.eql(\"Produto não encontrado.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{APP_DOMAIN_AND_PORT}}/produtos/0",
									"host": [
										"{{APP_DOMAIN_AND_PORT}}"
									],
									"path": [
										"produtos",
										"0"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Transportadoras",
					"item": []
				},
				{
					"name": "Veiculos",
					"item": []
				},
				{
					"name": "Viagens",
					"item": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"function generateANameGenerator() {",
					"  const num = 10;",
					"  const randomNameGenerator = (num) => {",
					"    let res = '';",
					"    for (let i = 0; i < num; i++) {",
					"      const random = Math.floor(Math.random() * 27);",
					"      res += String.fromCharCode(97 + random);",
					"    }",
					"    return res;",
					"  };",
					"  return randomNameGenerator(num);",
					"}",
					"",
					"const randomName = generateANameGenerator();",
					"pm.environment.set(\"RANDOM_NAME\", randomName);",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "APP_DOMAIN_AND_PORT",
			"value": "http://localhost:3000",
			"type": "string"
		},
		{
			"key": "ORIGINLOCALITY_ID",
			"value": ""
		}
	]
}